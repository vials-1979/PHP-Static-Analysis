class BaseVulnerability:
    def __init__(self):
        self.filter_functions = []
        self.custom_filter_functions = []
        self.sensitive_sinks = []

    def is_filter_function(self, function_name):
        return function_name in self.filter_functions

    def is_custom_filter_function(self, function_name):
        return function_name in self.custom_filter_functions

    def is_sensitive_sink(self, function_name):
        return function_name in self.sensitive_sinks


    #报告生成 

    def generate_report(self, vulnerability_detected):
        if vulnerability_detected:
            return f"{self.__class__.__name__} vulnerability detected."
        else:
            return f"No {self.__class__.__name__} vulnerability detected."




class CommandExecutionVulnerability(BaseVulnerability):
    def __init__(self):
        super().__init__()
        self.filter_functions = [
            'escapeshellarg',
            'escapeshellcmd'
        ]
        # 在这里添加自定义安全过滤函数
        self.custom_filter_functions = []
        self.sensitive_sinks = [
            'exec',
            'passthru',
            'shell_exec',
            'system',
            'popen',
            'proc_open',
            'pcntl_exec',
            '``',
            'mail',
            'mb_send_mail',
            'expect_popen'
        ]


class VulnerabilitySet:
    def __init__(self):
        self.vulnerabilities = [CommandExecutionVulnerability()]  # 添加其他漏洞类的实例

    # def validate_vulnerabilities(self, tainted_paths):
    #     for vulnerability in self.vulnerabilities:
    #         for path in tainted_paths:
    #             if vulnerability.is_sensitive_sink(path.op):
    #                 if any(var in tainted_vars for var in (path.left_operand, path.right_operand)):
    #                     if not (vulnerability.is_filter_function(path.op) or vulnerability.is_custom_filter_function(path.op)):
    #                         print(vulnerability.generate_report(True))




